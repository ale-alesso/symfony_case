stages:
  - install
  - test
  - deploy

variables:
  DATABASE_URL: "mysql://db_user:db_password@127.0.0.1:3306/db_name"

cache:
  paths:
    - vendor/

install_dependencies:
  stage: install
  image: composer:latest
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts --optimize-autoloader
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - vendor/
  artifacts:
    paths:
      - vendor/

run_tests:
  stage: test
  image: php:8.1
  services:
    - name: mysql:5.7
      alias: db
  variables:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: test_db
    MYSQL_USER: test_user
    MYSQL_PASSWORD: test_password
  before_script:
    - apt-get update && apt-get install -y git unzip libzip-dev
    - docker-php-ext-install pdo_mysql zip
    - cp .env.test .env
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts --optimize-autoloader
    - php bin/console doctrine:database:create --env=test
    - php bin/console doctrine:schema:update --force --env=test
  script:
    - php bin/phpunit --coverage-text
  artifacts:
    reports:
      junit: junit.xml
    paths:
      - coverage/

deploy_production:
  stage: deploy
  image: ruby:2.6
  before_script:
    - curl https://cli-assets.heroku.com/install.sh | sh
  script:
    - heroku git:remote -a your-heroku-app-name
    - git push heroku master
  only:
    - main

build_docker_image:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
